
"""image"": ""mcr.microsoft.com/devcontainers/javascript-node:0-18"","
"""customizations"": {"
"""vscode"": {"
"""extensions"": ["
"""carhart/User/bin/Bash/ideamd'@ZachryTylerWood/.Vscode"""
]
}
},
"""features"": {"
"""ghcr.io/devcontainers/features/docker-in-docker:2"": {}"
},
"""remoteUser"": ""node"","
"""postCreateCommand"": ""npm install -g @devcontainers/cli"""
}

@@ -0,0 +1,47 @@
"name: ""Release dev container features & Generate Documentation"""
on:
workflow_dispatch:

jobs:
deploy:
if: ${{ github.ref == 'refs/heads/main' }}
runs-on: ubuntu-latest
permissions:
contents: write
pull-requests: write
packages: write
steps:
- uses: actions/checkout@v3

"- name: ""Publish Features"""
uses: devcontainers/action@v1
with:
"publish-features: ""true"""
"base-path-to-features: ""./src"""
"generate-docs: ""true"""

env:
GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

- name: Create PR for Documentation
id: push_image_info
env:
GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
run: |
set -e
"echo ""Start."""
# Configure git and Push updates
git config --global user.email github-actions@github.com
git config --global user.name github-actions
git config pull.rebase false
branch=automated-documentation-update-$GITHUB_RUN_ID
git checkout -b $branch
message='Automated documentation update'
# Add / update and commit
git add */**/README.md
git commit -m 'Automated documentation update [skip ci]' || export NO_UPDATES=true
# Push
"if [ ""$NO_UPDATES"" != ""true"" ] ; then"
"git push origin ""$branch"""
"gh pr create --title ""$message"" --body ""$message"""
fi

@@ -0,0 +1,58 @@
"name: ""CI - Test Features"""
on:
push:
branches:
- main
pull_request:
workflow_dispatch:

jobs:
test-autogenerated:
runs-on: ubuntu-latest
continue-on-error: true
strategy:
matrix:
features:
- color
- hello
baseImage:
- debian:latest
- ubuntu:latest
- mcr.microsoft.com/devcontainers/base:ubuntu
steps:
- uses: actions/checkout@v3

"- name: ""Install latest devcontainer CLI"""
run: npm install -g @devcontainers/cli

"- name: ""Generating tests for '${{ matrix.features }}' against '${{ matrix.baseImage }}'"""
run: devcontainer features test --skip-scenarios -f ${{ matrix.features }} -i ${{ matrix.baseImage }} .

test-scenarios:
runs-on: ubuntu-latest
continue-on-error: true
strategy:
matrix:
features:
- color
- hello
steps:
- uses: actions/checkout@v3

"- name: ""Install latest devcontainer CLI"""
run: npm install -g @devcontainers/cli

"- name: ""Generating tests for '${{ matrix.features }}' scenarios"""
run: devcontainer features test -f ${{ matrix.features }} --skip-autogenerated .

test-global:
runs-on: ubuntu-latest
continue-on-error: true
steps:
- uses: actions/checkout@v3

"- name: ""Install latest devcontainer CLI"""
run: npm install -g @devcontainers/cli

"- name: ""Testing global scenarios"""
run: devcontainer features test --global-scenarios-only .

@@ -0,0 +1,16 @@
"name: ""Validate devcontainer-feature.json files"""
on:
workflow_dispatch:
pull_request:

jobs:
validate:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v3

"- name: ""Validate devcontainer-feature.json files"""
uses: devcontainers/action@v1
with:
"validate-only: ""true"""
"base-path-to-features: ""./src"""


@@ -0,0 +1,184 @@
# Dev Container Features: Self Authoring Template

> This repo provides a starting point and example for creating your own custom [dev container Features](https://containers.dev/implementors/features/), hosted for free on GitHub Container Registry. The example in this repository follows the [dev container Feature distribution specification](https://containers.dev/implementors/features-distribution/).
>
> To provide feedback to the specification, please leave a comment [on spec issue #70](https://github.com/devcontainers/spec/issues/70). For more broad feedback regarding dev container Features, please see [spec issue #61](https://github.com/devcontainers/spec/issues/61).

## Example Contents

This repository contains a _collection_ of two Features - `hello` and `color`. These Features serve as simple feature implementations. Each sub-section below shows a sample `devcontainer.json` alongside example usage of the Feature.

### `hello`

Running `hello` inside the built container will print the greeting provided to it via its `greeting` option.

```jsonc
{
"""image"": ""mcr.microsoft.com/devcontainers/base:ubuntu"","
"""features"": {"
"""ghcr.io/devcontainers/feature-starter/hello:1"": {"
"""greeting"": ""Hello"""
}
}
}
```

```bash
$ hello

Hello, user.
```

### `color`

Running `color` inside the built container will print your favorite color to standard out.

```jsonc
{
"""image"": ""mcr.microsoft.com/devcontainers/base:ubuntu"","
"""features"": {"
"""ghcr.io/devcontainers/feature-starter/color:1"": {"
"""favorite"": ""green"""
}
}
}
```

```bash
$ color

my favorite color is green
```

## Repo and Feature Structure

Similar to the [`devcontainers/features`](https://github.com/devcontainers/features) repo, this repository has a `src` folder. Each Feature has its own sub-folder, containing at least a `devcontainer-feature.json` and an entrypoint script `install.sh`.

```
├── src
│ ├── hello
│ │ ├── devcontainer-feature.json
│ │ └── install.sh
│ ├── color
│ │ ├── devcontainer-feature.json
│ │ └── install.sh
| ├── ...
│ │ ├── devcontainer-feature.json
│ │ └── install.sh
...
```

An [implementing tool](https://containers.dev/supporting#tools) will composite [the documented dev container properties](https://containers.dev/implementors/features/#devcontainer-feature-json-properties) from the feature's `devcontainer-feature.json` file, and execute in the `install.sh` entrypoint script in the container during build time. Implementing tools are also free to process attributes under the `customizations` property as desired.

### Options

All available options for a Feature should be declared in the `devcontainer-feature.json`. The syntax for the `options` property can be found in the [devcontainer Feature json properties reference](https://containers.dev/implementors/features/#devcontainer-feature-json-properties).

"For example, the `color` feature provides an enum of three possible options (`red`, `gold`, `green`). If no option is provided in a user's `devcontainer.json`, the value is set to ""red""."

```jsonc
{
// ...
"""options"": {"
"""favorite"": {"
"""type"": ""string"","
"""enum"": ["
"""red"","
"""gold"","
"""green"""
],
"""default"": ""red"","
"""description"": ""Choose your favorite color."""
}
}
}
```

Options are exported as Feature-scoped environment variables. The option name is captialized and sanitized according to [option resolution](https://containers.dev/implementors/features/#option-resolution).

```bash
#!/bin/bash

"echo ""Activating feature 'color'"""
"echo ""The provided favorite color is: ${FAVORITE}"""

...
```

## Distributing Features

### Versioning

Features are individually versioned by the `version` attribute in a Feature's `devcontainer-feature.json`. Features are versioned according to the semver specification. More details can be found in [the dev container Feature specification](https://containers.dev/implementors/features/#versioning).

### Publishing

> NOTE: The Distribution spec can be [found here](https://containers.dev/implementors/features-distribution/).
>
> While any registry [implementing the OCI Distribution spec](https://github.com/opencontainers/distribution-spec) can be used, this template will leverage GHCR (GitHub Container Registry) as the backing registry.

Features are meant to be easily sharable units of dev container configuration and installation code.

This repo contains a GitHub Action [workflow](.github/workflows/release.yaml) that will publish each feature to GHCR. By default, each Feature will be prefixed with the `<owner/<repo>` namespace. For example, the two Features in this repository can be referenced in a `devcontainer.json` with:

```
ghcr.io/devcontainers/feature-starter/color:1
ghcr.io/devcontainers/feature-starter/hello:1
```

"The provided GitHub Action will also publish a third ""metadata"" package with just the namespace, eg: `ghcr.io/devcontainers/feature-starter`. This contains information useful for tools aiding in Feature discovery."

`devcontainers/feature-starter`' is known as the feature collection namespace.

### Marking Feature Public

Note that by default, GHCR packages are marked as `private`. To stay within the free tier, Features need to be marked as `public`.

"This can be done by navigating to the Feature's ""package settings"" page in GHCR, and setting the visibility to 'public`. The URL may look something like:"

```
https://github.com/users/<owner>/packages/container/<repo>%2F<featureName>/settings
```

"<img width=""669"" alt=""image"" src=""https://user-images.githubusercontent.com/23246594/185244705-232cf86a-bd05-43cb-9c25-07b45b3f4b04.png"">"

### Adding Features to the Index

If you'd like your Features to appear in our [public index](https://containers.dev/features) so that other community members can find them, you can do the following:

* Go to [github.com/devcontainers/devcontainers.github.io](https://github.com/devcontainers/devcontainers.github.io)
* This is the GitHub repo backing the [containers.dev](https://containers.dev/) spec site
* Open a PR to modify the [collection-index.yml](https://github.com/devcontainers/devcontainers.github.io/blob/gh-pages/_data/collection-index.yml) file

This index is from where [supporting tools](https://containers.dev/supporting) like [VS Code Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) and [GitHub Codespaces](https://github.com/features/codespaces) surface Features for their dev container creation UI.

#### Using private Features in Codespaces

For any Features hosted in GHCR that are kept private, the `GITHUB_TOKEN` access token in your environment will need to have `package:read` and `contents:read` for the associated repository.

Many implementing tools use a broadly scoped access token and will work automatically. GitHub Codespaces uses repo-scoped tokens, and therefore you'll need to add the permissions in `devcontainer.json`

An example `devcontainer.json` can be found below.

```jsonc
{
"""image"": ""mcr.microsoft.com/devcontainers/base:ubuntu"","
"""features"": {"
"""ghcr.io/my-org/private-features/hello:1"": {"
"""greeting"": ""Hello"""
}
},
"""customizations"": {"
"""codespaces"": {"
"""repositories"": {"
"""my-org/private-features"": {"
"""permissions"": {"
"""packages"": ""read"","
"""contents"": ""read"""
}
}
}
}
}
}
```

@@ -0,0 +1,26 @@

# My Favorite Color (color)

A feature to remind you of your favorite color

## Example Usage

```json
"""features"": {"
"""ghcr.io/devcontainers/feature-starter/color:1"": {"
"""version"": ""latest"""
}
}
```

## Options

| Options Id | Description | Type | Default Value |
|-----|-----|-----|-----|
| favorite | Choose your favorite color. | string | red |



---

_Note: This file was auto-generated from the [devcontainer-feature.json](https://github.com/devcontainers/feature-starter/blob/main/src/color/devcontainer-feature.json). Add additional notes to a `NOTES.md`._

@@ -0,0 +1,21 @@
{
"""name"": ""My Favorite Color"","
"""id"": ""color"","
"""version"": ""1.0.3"","
"""description"": ""A feature to remind you of your favorite color"","
"""options"": {"
"""favorite"": {"
"""type"": ""string"","
"""enum"": ["
"""red"","
"""gold"","
"""green"""
],
"""default"": ""red"","
"""description"": ""Choose your favorite color."""
}
},
"""installsAfter"": ["
"""ghcr.io/devcontainers/features/common-utils"""
]
}

@@ -0,0 +1,26 @@
#!/bin/sh
set -e

"echo ""Activating feature 'color'"""
"echo ""The provided favorite color is: ${FAVORITE}"""


# The 'install.sh' entrypoint script is always executed as the root user.
#
# These following environment variables are passed in by the dev container CLI.
# These may be useful in instances where the context of the final
# remoteUser or containerUser is useful.
# For more details, see https://containers.dev/implementors/features#user-env-var
"echo ""The effective dev container remoteUser is '$_REMOTE_USER'"""
"echo ""The effective dev container remoteUser's home directory is '$_REMOTE_USER_HOME'"""

"echo ""The effective dev container containerUser is '$_CONTAINER_USER'"""
"echo ""The effective dev container containerUser's home directory is '$_CONTAINER_USER_HOME'"""

cat > /usr/local/bin/color \
<< EOF
#!/bin/sh
"echo ""my favorite color is ${FAVORITE}"""
EOF

chmod +x /usr/local/bin/color

@@ -0,0 +1,26 @@

# Hello, World! (hello)

A hello world feature

## Example Usage

```json
"""features"": {"
"""ghcr.io/devcontainers/feature-starter/hello:1"": {"
"""version"": ""latest"""
}
}
```

## Options

| Options Id | Description | Type | Default Value |
|-----|-----|-----|-----|
| greeting | Select a pre-made greeting, or enter your own | string | hey |



---

_Note: This file was auto-generated from the [devcontainer-feature.json](https://github.com/devcontainers/feature-starter/blob/main/src/hello/devcontainer-feature.json). Add additional notes to a `NOTES.md`._

@@ -0,0 +1,22 @@
{
"""name"": ""Hello, World!"","
"""id"": ""hello"","
"""version"": ""1.0.2"","
"""description"": ""A hello world feature"","
"""options"": {"
"""greeting"": {"
"""type"": ""string"","
"""proposals"": ["
"""hey"","
"""hello"","
"""hi"","
"""howdy"""
],
"""default"": ""hey"","
"""description"": ""Select a pre-made greeting, or enter your own"""
}
},
"""installsAfter"": ["
"""ghcr.io/devcontainers/features/common-utils"""
]
}

@@ -0,0 +1,29 @@
#!/bin/sh
set -e

"echo ""Activating feature 'hello'"""

GREETING=${GREETING:-undefined}
"echo ""The provided greeting is: $GREETING"""

# The 'install.sh' entrypoint script is always executed as the root user.
#
# These following environment variables are passed in by the dev container CLI.
# These may be useful in instances where the context of the final
# remoteUser or containerUser is useful.
# For more details, see https://containers.dev/implementors/features#user-env-var
"echo ""The effective dev container remoteUser is '$_REMOTE_USER'"""
"echo ""The effective dev container remoteUser's home directory is '$_REMOTE_USER_HOME'"""

"echo ""The effective dev container containerUser is '$_CONTAINER_USER'"""
"echo ""The effective dev container containerUser's home directory is '$_CONTAINER_USER_HOME'"""

cat > /usr/local/bin/hello \
<< EOF
#!/bin/sh
RED='\033[0;91m'
NC='\033[0m' # No Color
"echo ""\${RED}${GREETING}, \$(whoami)!\${NC}"""
EOF

chmod +x /usr/local/bin/hello

@@ -0,0 +1,33 @@
#!/bin/bash

# The 'test/_global' folder is a special test folder that is not tied to a single feature.
#
# This test file is executed against a running container constructed
# from the value of 'color_and_hello' in the tests/_global/scenarios.json file.
#
# The value of a scenarios element is any properties available in the 'devcontainer.json'.
# Scenarios are useful for testing specific options in a feature, or to test a combination of features.
#
# This test can be run with the following command (from the root of this repo)
# devcontainer features test --global-scenarios-only .

set -e

# Optional: Import test library bundled with the devcontainer CLI
source dev-container-features-test-lib

"echo -e ""The result of the 'color' command will be:\n"""
color
"echo -e ""The result of the 'hello' command will be:\n"""
hello
"echo -e ""\n"""

# Feature-specific tests
# The 'check' command comes from the dev-container-features-test-lib.
"check ""check purple is my favorite color"" bash -c ""color | grep 'my favorite color is purple'"""
"check ""check I am greeting with 'Greetings'"" bash -c ""hello | grep 'Greetings, $(whoami)'"""


# Report result
# If any of the checks above exited with a non-zero exit code, the test will fail.
reportResults

@@ -0,0 +1,13 @@
{
"""color_and_hello"": {"
"""image"": ""mcr.microsoft.com/devcontainers/base:ubuntu"","
"""features"": {"
"""color"": {"
"""favorite"": ""purple"""
},
"""hello"": {"
"""greeting"": ""Greetings"""
}
}
}
}

@@ -0,0 +1,17 @@
#!/bin/bash

# This test file will be executed against one of the scenarios devcontainer.json test that
"# includes the 'color' feature with ""favorite"": ""gold"" option."

set -e

# Optional: Import test library bundled with the devcontainer CLI
source dev-container-features-test-lib

# Feature-specific tests
# The 'check' command comes from the dev-container-features-test-lib.
"check ""execute command"" bash -c ""color | grep 'my favorite color is gold'"""

# Report result
# If any of the checks above exited with a non-zero exit code, the test will fail.
reportResults

@@ -0,0 +1,17 @@
#!/bin/bash

# This test file will be executed against one of the scenarios devcontainer.json test that
"# includes the 'color' feature with ""favorite"": ""green"" option."

set -e

# Optional: Import test library bundled with the devcontainer CLI
source dev-container-features-test-lib

# Feature-specific tests
# The 'check' command comes from the dev-container-features-test-lib.
"check ""execute command"" bash -c ""color | grep 'my favorite color is green'"""

# Report result
# If any of the checks above exited with a non-zero exit code, the test will fail.
reportResults

@@ -0,0 +1,31 @@
#!/bin/bash

# This test file will be executed against after building a container with the
# 'my_favorite_color_is_green' scenario in 'test/test/color/scenarios.json'.
#
# For more information, see: https://github.com/devcontainers/cli/blob/main/docs/features/test.md
#
# This scenario first uses the 'common-utils' Features to add a new user 'octocat'.
# It then installs the 'color' Feature with the FAVORITE option set to 'green' (the default FAVORITE value if none provided is 'red').
#
#
# This test (as well as any of the other scenarios in 'scenarios.json') can be run with the following command:
#
# devcontainer features test \
# --features color \
# --skip-autogenerated \
# /path/to/this/repo

set -e

# Optional: Import test library bundled with the devcontainer CLI
# Provides the 'check' and 'reportResults' commands.
source dev-container-features-test-lib

# Feature-specific tests
# The 'check' command comes from the dev-container-features-test-lib.
"check ""validate favorite color"" color | grep 'my favorite color is green'"

# Report result
# If any of the checks above exited with a non-zero exit code, the test will fail.
reportResults

@@ -0,0 +1,33 @@
{
"""my_favorite_color_is_green"": {"
"""image"": ""mcr.microsoft.com/devcontainers/base:focal"","
"""features"": {"
"""ghcr.io/devcontainers/features/common-utils:1"": {"
"""installZsh"": false,"
"""installOhMyZsh"": false,"
"""upgradePackages"": false,"
"""username"": ""octocat"""
},
"""color"": {"
"""favorite"": ""green"""
}
},
"""remoteUser"": ""octocat"""
},
"""gold"": {"
"""image"": ""mcr.microsoft.com/devcontainers/base:ubuntu"","
"""features"": {"
"""color"": {"
"""favorite"": ""gold"""
}
}
},
"""green"": {"
"""image"": ""mcr.microsoft.com/devcontainers/base:ubuntu"","
"""features"": {"
"""color"": {"
"""favorite"": ""green"""
}
}
}
}




@@ -0,0 +1,17 @@
#!/bin/bash

# This test file will be executed against one of the scenarios devcontainer.json test that
"# includes the 'color' feature with ""greeting"": ""hello"" option."

set -e

# Optional: Import test library bundled with the devcontainer CLI
source dev-container-features-test-lib

# Feature-specific tests
# The 'check' command comes from the dev-container-features-test-lib.
"check ""execute command"" bash -c ""hello | grep 'hello, $(whoami)!'"""

# Report results
# If any of the checks above exited with a non-zero exit code, the test will fail.
reportResults

@@ -0,0 +1,10 @@
{
"""hello"": {"
"""image"": ""mcr.microsoft.com/devcontainers/base:ubuntu"","
"""features"": {"
"""hello"": {"
"""greeting"": ""hello"""
}
}
}
}

@@ -0,0 +1,45 @@
#!/bin/bash

# This test file will be executed against an auto-generated devcontainer.json that
# includes the 'hello' Feature with no options.
#
# For more information, see: https://github.com/devcontainers/cli/blob/main/docs/features/test.md
#
# Eg:
# {
"# ""image"": ""<..some-base-image...>"","
"# ""features"": {"
"# ""hello"": {}"
# },
"# ""remoteUser"": ""root"""
# }
#
# Thus, the value of all options will fall back to the default value in
# the Feature's 'devcontainer-feature.json'.
# For the 'hello' feature, that means the default favorite greeting is 'hey'.
#
# These scripts are run as 'root' by default. Although that can be changed
# with the '--remote-user' flag.
#
# This test can be run with the following command:
#
# devcontainer features test \
# --features hello \
# --remote-user root \
# --skip-scenarios \
# --base-image mcr.microsoft.com/devcontainers/base:ubuntu \
# /path/to/this/repo

set -e

# Optional: Import test library bundled with the devcontainer CLI
# Provides the 'check' and 'reportResults' commands.
source dev-container-features-test-lib

# Feature-specific tests
# The 'check' command comes from the dev-container-features-test-lib.
"check ""execute command"" bash -c ""hello | grep 'hey, $(whoami)!'"""

# Report results
# If any of the checks above exited with a non-zero exit code, the test will fail.
reportResults















































































































































































































































































# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy a container to an Azure Web App

env:
  AZURE_WEBAPP_NAME: your-app-name  # set this to the name of your Azure Web App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'
