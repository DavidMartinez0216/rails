class TravisMatrixBuilder
  def call
    full_envs = <<-ENV.lines.map(&:strip)
      GEM=ap,ac
      GEM=am,amo,as,av,aj
      GEM=as PRESERVE_TIMEZONES=1
      GEM=ar:mysql2
      GEM=ar:sqlite3
      GEM=ar:postgresql
      GEM=guides
      GEM=ac:integration
      GEM=aj:integration
    ENV

    single_envs = <<-ENV.lines.map(&:strip).grep(/./)
      GEM=av:ujs
      GEM=ar:mysql2 MARIADB=10.0
      GEM=ar:sqlite3_mem
      GEM=ar:postgresql POSTGRES=9.2

      GEM=ap ISOLATED=1
      GEM=am,amo,as,av,aj ISOLATED=1
      GEM=ar:mysql2 ISOLATED=1
      GEM=ar:sqlite3 ISOLATED=1
      GEM=ar:postgresql ISOLATED=1
    ENV

    rubies = YAML.load_file(".travis.yml")["rvm"]
    single_ruby = rubies.grep(/^[0-9.]+$/).last

    matrix = full_envs.flat_map do |e|
      rubies.map do |r|
        { "rvm" => r, "env" => e }
      end
    end + single_envs.map do |e|
      { "rvm" => single_ruby, "env" => e }
    end

    matrix.each do |m|
      m["stage"] = m["env"] =~ /ISOLATED/ ? "Isolated" :
                     m["rvm"] == single_ruby && m["env"] !~ /ar:.*[_ ]/ ? "Test" :
                     "Compatibility"

      # Railties takes a long time; start them all at the beginning
      m["stage"] = "Test" if m["env"] =~ /railties/ && m["rvm"] =~ /^[0-9.]+$/

      m["services"] = %w(memcached redis rabbitmq) if m["env"] =~ /aj:integration/
      m["addons"] = { "mariadb" => $1 } if m["env"] =~ /MARIADB=([0-9.]+)/
      m["addons"] = { "postgresql" => $1 } if m["env"] =~ /POSTGRES=([0-9.]+)/
    end

    matrix << { "rvm" => "jruby-9.1.8.0", "jdk" => "oraclejdk8", "env" => "GEM=ap,am,amo,aj", "stage" => "Compatibility" }

    stages = %w(Test Compatibility Isolated)
    matrix.enum_for(:sort_by!).with_index { |m, i| [stages.index(m["stage"]), m["rvm"] =~ /head/ ? 1 : m["rvm"] =~ /jruby/ ? 2 : 0, i] }

    matrix
  end
end

namespace :travis do
  task :matrix do
    require "yaml"
    contents = File.read(".travis.yml")
    new_matrix = TravisMatrixBuilder.new.call
    contents.sub!(/^matrix:\n  include:\n\K(    .*\n)*/, YAML.dump(new_matrix).sub(/\A---\n/, "# This section is autogenerated by tasks/travis.rb\n").gsub(/^/, "    "))
    File.open(".travis.yml", "w") { |f| f.write(contents) }
  end
end
